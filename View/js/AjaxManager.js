// This is a simple mutex, avoiding multiple request sent in parallel.
// This solves all error generated by sending twice the same request.
// Is not a perfect solution as it might be needed (even though in our
// application is not happening) to send different request at the same time.
// TODO: Add a parameter BlockingRequest to MakeAjaxRequest. The mutex should
//	   be used only if such parameter is set to true.
var AjaxRequestBeingProcessed = false;

function MakeAjaxRequest(url, data, exec, NoMessage, FormData) {
	if (AjaxRequestBeingProcessed) {
		var response = {type: 'bad', text: 'Non è possibile mandare più di una richiesta al server in simultanea'};
		if (NoMessage == null || NoMessage != 1) ShowMessage(response.type, response.text);
		if (exec) exec(response);
		return;
	}
	AjaxRequestBeingProcessed = true;  // acquiring the mutex
	var ajaxReq;
	if (window.XMLHttpRequest) ajaxReq = new XMLHttpRequest();
	else ajaxReq = new ActiveXObject('Microsoft.XMLHTTP');
	ajaxReq.open('POST', url, true);

	if (FormData) ajaxReq.send(data);
	else {
		ajaxReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
		ajaxReq.send('data='+encodeURIComponent(JSON.stringify(data)));
	}
	
	document.getElementsByTagName('html')[0].classList.add('CursorWait');
	ajaxReq.onreadystatechange = function() {
		if (ajaxReq.readyState == 4 && ajaxReq.status == 200) {
			AjaxRequestBeingProcessed = false;  // releasing the mutex
			document.getElementsByTagName('html')[0].classList.remove('CursorWait');
			var response = JSON.parse(ajaxReq.responseText); 
			if (NoMessage == null || NoMessage != 1) ShowMessage(response.type, response.text);
			if (exec) exec(response);
		}
		if (ajaxReq.readyState == 4 && ajaxReq.status != 200) {
			AjaxRequestBeingProcessed = false;  // releasing the mutex
			ShowMessage('bad', 'Errore nel leggere la risposta del server; chiedi aiuto ai gestori del sito');
		}
	};
}
